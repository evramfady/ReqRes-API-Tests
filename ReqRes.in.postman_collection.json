{
	"info": {
		"_postman_id": "7e899cad-9a0f-4732-9daf-bb94aeeb63d0",
		"name": "ReqRes.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45494555"
	},
	"item": [
		{
			"name": "ListUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking Page Number\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Checking Entries per Page \", function () {\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Each user has required fields\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    jsonData.data.forEach(function(user) {\r",
							"        pm.expect(user.email).to.exist;\r",
							"        pm.expect(user.first_name).to.exist;\r",
							"        pm.expect(user.last_name).to.exist;\r",
							"        pm.expect(user.avatar).to.exist;\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURI}}users?page=2",
					"host": [
						"{{BaseURI}}users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ListSingleUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User ID matches\", function () {\r",
							"    pm.expect(jsonData.data.id).to.eql(pm.collectionVariables.get(\"UserID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"User has required fields\", function () {\r",
							"    pm.expect(jsonData.data.email).to.exist;\r",
							"    pm.expect(jsonData.data.first_name).to.exist;\r",
							"    pm.expect(jsonData.data.last_name).to.exist;\r",
							"    pm.expect(jsonData.data.avatar).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const RandomValue = Math.floor(Math.random() *12) +1;\r",
							"\r",
							"pm.collectionVariables.set(\"UserID\",RandomValue); \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURI}}users/{{UserID}}",
					"host": [
						"{{BaseURI}}users"
					],
					"path": [
						"{{UserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NotFoundUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"The response data is empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal({});\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURI}}users/23",
					"host": [
						"{{BaseURI}}users"
					],
					"path": [
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "ListResourcse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let resourceName = jsonData.data[pm.collectionVariables.get(\"ResourceID\") - 1].name;\r",
							"pm.collectionVariables.set(\"resourceName\", resourceName);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking Page Number\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Checking Entries per Page \", function () {\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Each user has required fields\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    jsonData.data.forEach(function (user) {\r",
							"        pm.expect(user.id).to.exist;\r",
							"        pm.expect(user.name).to.exist;\r",
							"        pm.expect(user.year).to.exist;\r",
							"        pm.expect(user.color).to.exist;\r",
							"        pm.expect(user.pantone_value).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const RandomValue = Math.floor(Math.random() * 6) + 1; // 1 to 6 only\r",
							"pm.collectionVariables.set(\"ResourceID\", RandomValue);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURI}}unknown",
					"host": [
						"{{BaseURI}}unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "ListSingleResource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"let resource2Name = pm.collectionVariables.get(\"resourceName\");\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the correct name in the response\", function () {\r",
							"    pm.expect(jsonData.data.name).to.eql(resource2Name);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURI}}unknown/{{ResourceID}}",
					"host": [
						"{{BaseURI}}unknown"
					],
					"path": [
						"{{ResourceID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NotFoundResource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"The response data is empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.deep.equal({});\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURI}}unknown/23",
					"host": [
						"{{BaseURI}}unknown"
					],
					"path": [
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct job\", function () {\r",
							"    pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}users",
					"host": [
						"{{BaseURI}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct job\", function () {  \r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}users/2",
					"host": [
						"{{BaseURI}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUserUsingPatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct job\", function () {  \r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}users/2",
					"host": [
						"{{BaseURI}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteAddedUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}users/2",
					"host": [
						"{{BaseURI}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "SuccessfulRegister",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking the right ID\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking the right token\", function () {\r",
							"    pm.expect(jsonData.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}register",
					"host": [
						"{{BaseURI}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnSuccessfulRegister",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains 'Missing password'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Missing password');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}register",
					"host": [
						"{{BaseURI}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginSuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains 'Missing password'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('QpwL5tke4Pnpja7X4');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}login",
					"host": [
						"{{BaseURI}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginError",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains 'Missing password'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Missing password');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}register",
					"host": [
						"{{BaseURI}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "DelayedResponse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURI}}users?delay=3",
					"host": [
						"{{BaseURI}}users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{x-api-key}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 3.5 Seconds\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(3500);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "x-api-key",
			"value": "reqres-free-v1",
			"type": "default"
		},
		{
			"key": "BaseURI",
			"value": "https://reqres.in/api/",
			"type": "string"
		},
		{
			"key": "UserID",
			"value": ""
		},
		{
			"key": "resourceName",
			"value": ""
		},
		{
			"key": "ResourceID",
			"value": ""
		}
	]
}